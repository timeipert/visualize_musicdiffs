{
  "version": 3,
  "sources": ["../../timsort/build/timsort.js", "../../timsort/index.js", "../../neighbor-joining/dist/utils.js", "../../neighbor-joining/dist/neighbor-joining.js", "../../neighbor-joining/index.js"],
  "sourcesContent": ["/****\n * The MIT License\n *\n * Copyright (c) 2015 Marco Ziccardi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n ****/\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('timsort', ['exports'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.timsort = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  exports.__esModule = true;\n  exports.sort = sort;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  var DEFAULT_MIN_MERGE = 32;\n\n  var DEFAULT_MIN_GALLOPING = 7;\n\n  var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n  function alphabeticalCompare(a, b) {\n    if (a === b) {\n      return 0;\n    } else {\n      var aStr = String(a);\n      var bStr = String(b);\n\n      if (aStr === bStr) {\n        return 0;\n      } else {\n        return aStr < bStr ? -1 : 1;\n      }\n    }\n  }\n\n  function minRunLength(n) {\n    var r = 0;\n\n    while (n >= DEFAULT_MIN_MERGE) {\n      r |= n & 1;\n      n >>= 1;\n    }\n\n    return n + r;\n  }\n\n  function makeAscendingRun(array, lo, hi, compare) {\n    var runHi = lo + 1;\n\n    if (runHi === hi) {\n      return 1;\n    }\n\n    if (compare(array[runHi++], array[lo]) < 0) {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n        runHi++;\n      }\n\n      reverseRun(array, lo, runHi);\n    } else {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n        runHi++;\n      }\n    }\n\n    return runHi - lo;\n  }\n\n  function reverseRun(array, lo, hi) {\n    hi--;\n\n    while (lo < hi) {\n      var t = array[lo];\n      array[lo++] = array[hi];\n      array[hi--] = t;\n    }\n  }\n\n  function binaryInsertionSort(array, lo, hi, start, compare) {\n    if (start === lo) {\n      start++;\n    }\n\n    for (; start < hi; start++) {\n      var pivot = array[start];\n\n      var left = lo;\n      var right = start;\n\n      while (left < right) {\n        var mid = left + right >>> 1;\n\n        if (compare(pivot, array[mid]) < 0) {\n          right = mid;\n        } else {\n          left = mid + 1;\n        }\n      }\n\n      var n = start - left;\n\n      switch (n) {\n        case 3:\n          array[left + 3] = array[left + 2];\n\n        case 2:\n          array[left + 2] = array[left + 1];\n\n        case 1:\n          array[left + 1] = array[left];\n          break;\n        default:\n          while (n > 0) {\n            array[left + n] = array[left + n - 1];\n            n--;\n          }\n      }\n\n      array[left] = pivot;\n    }\n  }\n\n  function gallopLeft(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) > 0) {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    } else {\n      maxOffset = hint + 1;\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    }\n\n    lastOffset++;\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) > 0) {\n        lastOffset = m + 1;\n      } else {\n        offset = m;\n      }\n    }\n    return offset;\n  }\n\n  function gallopRight(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) < 0) {\n      maxOffset = hint + 1;\n\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    } else {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    }\n\n    lastOffset++;\n\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) < 0) {\n        offset = m;\n      } else {\n        lastOffset = m + 1;\n      }\n    }\n\n    return offset;\n  }\n\n  var TimSort = (function () {\n    function TimSort(array, compare) {\n      _classCallCheck(this, TimSort);\n\n      this.array = null;\n      this.compare = null;\n      this.minGallop = DEFAULT_MIN_GALLOPING;\n      this.length = 0;\n      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n      this.stackLength = 0;\n      this.runStart = null;\n      this.runLength = null;\n      this.stackSize = 0;\n\n      this.array = array;\n      this.compare = compare;\n\n      this.length = array.length;\n\n      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n        this.tmpStorageLength = this.length >>> 1;\n      }\n\n      this.tmp = new Array(this.tmpStorageLength);\n\n      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;\n\n      this.runStart = new Array(this.stackLength);\n      this.runLength = new Array(this.stackLength);\n    }\n\n    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {\n      this.runStart[this.stackSize] = runStart;\n      this.runLength[this.stackSize] = runLength;\n      this.stackSize += 1;\n    };\n\n    TimSort.prototype.mergeRuns = function mergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {\n\n          if (this.runLength[n - 1] < this.runLength[n + 1]) {\n            n--;\n          }\n        } else if (this.runLength[n] > this.runLength[n + 1]) {\n          break;\n        }\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\n          n--;\n        }\n\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.mergeAt = function mergeAt(i) {\n      var compare = this.compare;\n      var array = this.array;\n\n      var start1 = this.runStart[i];\n      var length1 = this.runLength[i];\n      var start2 = this.runStart[i + 1];\n      var length2 = this.runLength[i + 1];\n\n      this.runLength[i] = length1 + length2;\n\n      if (i === this.stackSize - 3) {\n        this.runStart[i + 1] = this.runStart[i + 2];\n        this.runLength[i + 1] = this.runLength[i + 2];\n      }\n\n      this.stackSize--;\n\n      var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n      start1 += k;\n      length1 -= k;\n\n      if (length1 === 0) {\n        return;\n      }\n\n      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n      if (length2 === 0) {\n        return;\n      }\n\n      if (length1 <= length2) {\n        this.mergeLow(start1, length1, start2, length2);\n      } else {\n        this.mergeHigh(start1, length1, start2, length2);\n      }\n    };\n\n    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {\n\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length1; i++) {\n        tmp[i] = array[start1 + i];\n      }\n\n      var cursor1 = 0;\n      var cursor2 = start2;\n      var dest = start1;\n\n      array[dest++] = array[cursor2++];\n\n      if (--length2 === 0) {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n        return;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(array[cursor2], tmp[cursor1]) < 0) {\n            array[dest++] = array[cursor2++];\n            count2++;\n            count1 = 0;\n\n            if (--length2 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest++] = tmp[cursor1++];\n            count1++;\n            count2 = 0;\n            if (--length1 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n          if (count1 !== 0) {\n            for (i = 0; i < count1; i++) {\n              array[dest + i] = tmp[cursor1 + i];\n            }\n\n            dest += count1;\n            cursor1 += count1;\n            length1 -= count1;\n            if (length1 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest++] = array[cursor2++];\n\n          if (--length2 === 0) {\n            exit = true;\n            break;\n          }\n\n          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n          if (count2 !== 0) {\n            for (i = 0; i < count2; i++) {\n              array[dest + i] = array[cursor2 + i];\n            }\n\n            dest += count2;\n            cursor2 += count2;\n            length2 -= count2;\n\n            if (length2 === 0) {\n              exit = true;\n              break;\n            }\n          }\n          array[dest++] = tmp[cursor1++];\n\n          if (--length1 === 1) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n      } else if (length1 === 0) {\n        throw new Error('mergeLow preconditions were not respected');\n      } else {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n      }\n    };\n\n    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length2; i++) {\n        tmp[i] = array[start2 + i];\n      }\n\n      var cursor1 = start1 + length1 - 1;\n      var cursor2 = length2 - 1;\n      var dest = start2 + length2 - 1;\n      var customCursor = 0;\n      var customDest = 0;\n\n      array[dest--] = array[cursor1--];\n\n      if (--length1 === 0) {\n        customCursor = dest - (length2 - 1);\n\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n\n        return;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(tmp[cursor2], array[cursor1]) < 0) {\n            array[dest--] = array[cursor1--];\n            count1++;\n            count2 = 0;\n            if (--length1 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest--] = tmp[cursor2--];\n            count2++;\n            count1 = 0;\n            if (--length2 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n          if (count1 !== 0) {\n            dest -= count1;\n            cursor1 -= count1;\n            length1 -= count1;\n            customDest = dest + 1;\n            customCursor = cursor1 + 1;\n\n            for (i = count1 - 1; i >= 0; i--) {\n              array[customDest + i] = array[customCursor + i];\n            }\n\n            if (length1 === 0) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = tmp[cursor2--];\n\n          if (--length2 === 1) {\n            exit = true;\n            break;\n          }\n\n          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n          if (count2 !== 0) {\n            dest -= count2;\n            cursor2 -= count2;\n            length2 -= count2;\n            customDest = dest + 1;\n            customCursor = cursor2 + 1;\n\n            for (i = 0; i < count2; i++) {\n              array[customDest + i] = tmp[customCursor + i];\n            }\n\n            if (length2 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = array[cursor1--];\n\n          if (--length1 === 0) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n      } else if (length2 === 0) {\n        throw new Error('mergeHigh preconditions were not respected');\n      } else {\n        customCursor = dest - (length2 - 1);\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n      }\n    };\n\n    return TimSort;\n  })();\n\n  function sort(array, compare, lo, hi) {\n    if (!Array.isArray(array)) {\n      throw new TypeError('Can only sort arrays');\n    }\n\n    if (!compare) {\n      compare = alphabeticalCompare;\n    } else if (typeof compare !== 'function') {\n      hi = lo;\n      lo = compare;\n      compare = alphabeticalCompare;\n    }\n\n    if (!lo) {\n      lo = 0;\n    }\n    if (!hi) {\n      hi = array.length;\n    }\n\n    var remaining = hi - lo;\n\n    if (remaining < 2) {\n      return;\n    }\n\n    var runLength = 0;\n\n    if (remaining < DEFAULT_MIN_MERGE) {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n      return;\n    }\n\n    var ts = new TimSort(array, compare);\n\n    var minRun = minRunLength(remaining);\n\n    do {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      if (runLength < minRun) {\n        var force = remaining;\n        if (force > minRun) {\n          force = minRun;\n        }\n\n        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n        runLength = force;\n      }\n\n      ts.pushRun(lo, runLength);\n      ts.mergeRuns();\n\n      remaining -= runLength;\n      lo += runLength;\n    } while (remaining !== 0);\n\n    ts.forceMergeRuns();\n  }\n});\n", "module.exports = require('./build/timsort.js');", "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.allocateSquareMatrix = allocateSquareMatrix;\nexports.arrayCopy = arrayCopy;\nexports.sumRows = sumRows;\nexports.sortWithIndices = sortWithIndices;\n\nvar _timsort = require('timsort');\n\nvar TimSort = _interopRequireWildcard(_timsort);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction allocateSquareMatrix(n) {\n    var value = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n    var a = new Array(n);\n    for (var i = 0; i < n; i++) {\n        a[i] = new Array(n);\n        if (value !== null) a[i].fill(value);\n    }\n    return a;\n}\n\nfunction arrayCopy(a) {\n    var b = new Array(a.length),\n        i = a.length;\n    while (i--) {\n        b[i] = a[i];\n    }\n    return b;\n}\n\nfunction sumRows(a) {\n    var sum = void 0,\n        n = a.length,\n        sums = new Array(n);\n\n    for (var i = 0; i < n; i++) {\n        sum = 0;\n        for (var j = 0; j < n; j++) {\n            if (a[i][j] === undefined) continue;\n            sum += a[i][j];\n        }\n        sums[i] = sum;\n    }\n\n    return sums;\n}\n\nfunction sortWithIndices(toSort) {\n    var skip = arguments.length <= 1 || arguments[1] === undefined ? -1 : arguments[1];\n    var timsort = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n    var n = toSort.length;\n    var indexCopy = new Array(n);\n    var valueCopy = new Array(n);\n    var i2 = 0;\n\n    for (var i = 0; i < n; i++) {\n        if (toSort[i] === -1 || i === skip) continue;\n        indexCopy[i2] = i;\n        valueCopy[i2++] = toSort[i];\n    }\n    indexCopy.length = i2;\n    valueCopy.length = i2;\n\n    if (timsort) {\n        TimSort.sort(indexCopy, function (a, b) {\n            return toSort[a] - toSort[b];\n        });\n    } else {\n        indexCopy.sort(function (a, b) {\n            return toSort[a] - toSort[b];\n        });\n    }\n\n    TimSort.sort(indexCopy, function (left, right) {\n        return toSort[left] - toSort[right];\n    });\n\n    valueCopy.sortIndices = indexCopy;\n    for (var j = 0; j < i2; j++) {\n        valueCopy[j] = toSort[indexCopy[j]];\n    }\n    return valueCopy;\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.RapidNeighborJoining = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = require(\"./utils.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RapidNeighborJoining = exports.RapidNeighborJoining = function () {\n    /* phylogenetic tree as object */\n    /* set of removed indices from D */\n    /* taxa array */\n    /* number of taxa */\n    /* sorted distance matrix */\n\n    function RapidNeighborJoining(D, taxa) {\n        var copyDistanceMatrix = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n        var taxonIdAccessor = arguments.length <= 3 || arguments[3] === undefined ? function (d) {\n            return d.name;\n        } : arguments[3];\n\n        _classCallCheck(this, RapidNeighborJoining);\n\n        if (taxa.length != D.length) {\n            console.error(\"Row/column size of the distance matrix does not agree with the size of taxa matrix\");\n            return;\n        }\n        var N = this.N = taxa.length;\n        this.cN = this.N;\n        if (copyDistanceMatrix) {\n            this.D = new Array(N);\n            for (var i = 0; i < N; i++) {\n                this.D[i] = (0, _utils.arrayCopy)(D[i]);\n            }\n        } else {\n            this.D = D;\n        }\n        this.taxa = taxa;\n        this.labelToTaxon = {};\n        this.currIndexToLabel = new Array(N);\n        this.rowChange = new Array(N);\n        this.newRow = new Array(N);\n        this.labelToNode = new Array(2 * N);\n        this.nextIndex = N;\n        this.initializeSI();\n        this.removedIndices = new Set();\n        this.indicesLeft = new Set();\n        for (var _i = 0; _i < N; _i++) {\n            this.currIndexToLabel[_i] = _i;\n            this.indicesLeft.add(_i);\n        }\n        this.rowSumMax = 0;\n        this.PNewick = \"\";\n        this.taxonIdAccessor = taxonIdAccessor;\n        return this;\n    } /* phylogenetic tree in Newick format */\n    /* set of yet not processed indices */\n    /* number of taxa left */\n    /* index map from S to D */\n    /* distance matrix */\n\n\n    _createClass(RapidNeighborJoining, [{\n        key: \"initializeSI\",\n        value: function initializeSI() {\n            var N = this.N;\n\n            this.I = new Array(N);\n            this.S = new Array(N);\n\n            for (var i = 0; i < N; i++) {\n                var sortedRow = (0, _utils.sortWithIndices)(this.D[i], i, true);\n                this.S[i] = sortedRow;\n                this.I[i] = sortedRow.sortIndices;\n            }\n        }\n    }, {\n        key: \"search\",\n        value: function search() {\n\n            var qMin = Infinity,\n                D = this.D,\n                cN = this.cN,\n                n2 = cN - 2,\n                S = this.S,\n                I = this.I,\n                rowSums = this.rowSums,\n                removedColumns = this.removedIndices,\n                uMax = this.rowSumMax,\n                q = void 0,\n                minI = -1,\n                minJ = -1,\n                c2 = void 0;\n\n            // initial guess for qMin\n            for (var r = 0; r < this.N; r++) {\n                if (removedColumns.has(r)) continue;\n                c2 = I[r][0];\n                if (removedColumns.has(c2)) continue;\n                q = D[r][c2] * n2 - rowSums[r] - rowSums[c2];\n                if (q < qMin) {\n                    qMin = q;\n                    minI = r;\n                    minJ = c2;\n                }\n            }\n\n            for (var _r = 0; _r < this.N; _r++) {\n                if (removedColumns.has(_r)) continue;\n                for (var c = 0; c < S[_r].length; c++) {\n                    c2 = I[_r][c];\n                    if (removedColumns.has(c2)) continue;\n                    if (S[_r][c] * n2 - rowSums[_r] - uMax > qMin) break;\n                    q = D[_r][c2] * n2 - rowSums[_r] - rowSums[c2];\n                    if (q < qMin) {\n                        qMin = q;\n                        minI = _r;\n                        minJ = c2;\n                    }\n                }\n            }\n\n            return { minI: minI, minJ: minJ };\n        }\n    }, {\n        key: \"run\",\n        value: function run() {\n            var minI = void 0,\n                minJ = void 0,\n                d1 = void 0,\n                d2 = void 0,\n                l1 = void 0,\n                l2 = void 0,\n                node1 = void 0,\n                node2 = void 0,\n                node3 = void 0,\n                self = this;\n\n            function setUpNode(label, distance) {\n                var node = void 0;\n                if (label < self.N) {\n                    node = new PhyloNode(self.taxa[label], distance);\n                    self.labelToNode[label] = node;\n                } else {\n                    node = self.labelToNode[label];\n                    node.setLength(distance);\n                }\n                return node;\n            }\n\n            this.rowSums = (0, _utils.sumRows)(this.D);\n            for (var i = 0; i < this.cN; i++) {\n                if (this.rowSums[i] > this.rowSumMax) this.rowSumMax = this.rowSums[i];\n            }\n\n            while (this.cN > 2) {\n                var _search = this.search();\n                //if (this.cN % 100 == 0 ) console.log(this.cN);\n\n\n                minI = _search.minI;\n                minJ = _search.minJ;\n\n\n                d1 = 0.5 * this.D[minI][minJ] + (this.rowSums[minI] - this.rowSums[minJ]) / (2 * this.cN - 4);\n                d2 = this.D[minI][minJ] - d1;\n\n                l1 = this.currIndexToLabel[minI];\n                l2 = this.currIndexToLabel[minJ];\n\n                node1 = setUpNode(l1, d1);\n                node2 = setUpNode(l2, d2);\n                node3 = new PhyloNode(null, null, node1, node2);\n\n                this.recalculateDistanceMatrix(minI, minJ);\n                var sorted = (0, _utils.sortWithIndices)(this.D[minJ], minJ, true);\n                this.S[minJ] = sorted;\n                this.I[minJ] = sorted.sortIndices;\n                this.S[minI] = this.I[minI] = [];\n                this.cN--;\n\n                this.labelToNode[this.nextIndex] = node3;\n                this.currIndexToLabel[minI] = -1;\n                this.currIndexToLabel[minJ] = this.nextIndex++;\n            }\n\n            var left = this.indicesLeft.values();\n            minI = left.next().value;\n            minJ = left.next().value;\n\n            l1 = this.currIndexToLabel[minI];\n            l2 = this.currIndexToLabel[minJ];\n            d1 = d2 = this.D[minI][minJ] / 2;\n\n            node1 = setUpNode(l1, d1);\n            node2 = setUpNode(l2, d2);\n\n            this.P = new PhyloNode(null, null, node1, node2);\n        }\n    }, {\n        key: \"recalculateDistanceMatrix\",\n        value: function recalculateDistanceMatrix(joinedIndex1, joinedIndex2) {\n            var D = this.D,\n                n = D.length,\n                sum = 0,\n                aux = void 0,\n                aux2 = void 0,\n                removedIndices = this.removedIndices,\n                rowSums = this.rowSums,\n                newRow = this.newRow,\n                rowChange = this.rowChange,\n                newMax = 0;\n\n            removedIndices.add(joinedIndex1);\n            for (var i = 0; i < n; i++) {\n                if (removedIndices.has(i)) continue;\n                aux = D[joinedIndex1][i] + D[joinedIndex2][i];\n                aux2 = D[joinedIndex1][joinedIndex2];\n                newRow[i] = 0.5 * (aux - aux2);\n                sum += newRow[i];\n                rowChange[i] = -0.5 * (aux + aux2);\n            }\n            for (var _i2 = 0; _i2 < n; _i2++) {\n                D[joinedIndex1][_i2] = -1;\n                D[_i2][joinedIndex1] = -1;\n                if (removedIndices.has(_i2)) continue;\n                D[joinedIndex2][_i2] = newRow[_i2];\n                D[_i2][joinedIndex2] = newRow[_i2];\n                rowSums[_i2] += rowChange[_i2];\n                if (rowSums[_i2] > newMax) newMax = rowSums[_i2];\n            }\n            rowSums[joinedIndex1] = 0;\n            rowSums[joinedIndex2] = sum;\n            if (sum > newMax) newMax = sum;\n            this.rowSumMax = newMax;\n            this.indicesLeft.delete(joinedIndex1);\n        }\n    }, {\n        key: \"createNewickTree\",\n        value: function createNewickTree(node) {\n            if (node.taxon) {\n                // leaf node\n                this.PNewick += this.taxonIdAccessor(node.taxon);\n            } else {\n                // node with children\n                this.PNewick += \"(\";\n                for (var i = 0; i < node.children.length; i++) {\n                    this.createNewickTree(node.children[i]);\n                    if (i < node.children.length - 1) this.PNewick += \",\";\n                }\n                this.PNewick += \")\";\n            }\n            if (node.length) {\n                this.PNewick += \":\" + node.length;\n            }\n        }\n    }, {\n        key: \"getAsObject\",\n        value: function getAsObject() {\n            return this.P;\n        }\n    }, {\n        key: \"getAsNewick\",\n        value: function getAsNewick() {\n            this.PNewick = \"\";\n            this.createNewickTree(this.P);\n            this.PNewick += \";\";\n            return this.PNewick;\n        }\n    }]);\n\n    return RapidNeighborJoining;\n}();\n\nvar PhyloNode = function () {\n    function PhyloNode() {\n        var taxon = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n        var length = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var child1 = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n        var child2 = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n        _classCallCheck(this, PhyloNode);\n\n        this.taxon = taxon;\n        this.length = length;\n        this.children = [];\n        if (child1 !== null) this.children.push(child1);\n        if (child2 !== null) this.children.push(child2);\n    }\n\n    _createClass(PhyloNode, [{\n        key: \"setLength\",\n        value: function setLength(length) {\n            this.length = length;\n        }\n    }]);\n\n    return PhyloNode;\n}();", "module.exports = {\n    RapidNeighborJoining: require('./dist/neighbor-joining.js').RapidNeighborJoining,\n    allocateSquareMatrix: require('./dist/utils.js').allocateSquareMatrix\n};"],
  "mappings": "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",
  "names": ["exports", "TimSort", "require_timsort", "RapidNeighborJoining", "PhyloNode", "require_neighbor_joining"]
}
